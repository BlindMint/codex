stages:
  - build
  - release

variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"  # Disable Gradle daemon in CI for stability

# Build the APK (runs on tagged commits; generates artifact)
build:
  stage: build
  image: cimg/android:2024.04  # Recommended: Includes Android SDK, Java, Gradle (Cirrus CI image)
  script:
    - chmod +x ./gradlew
    - echo "$KEY_PASSWORD" | ./gradlew assembleRelease -PKEY_PASSWORD="$KEY_PASSWORD"  # Assumes signing setup
  artifacts:
    paths:
      - app/build/outputs/apk/release/app-release.apk
      - app/build/outputs/apk/release/app-release.sha256  # Optional: Generated in release job if needed
    expire_in: 1 week  # Keeps artifact for download
    when: on_success  # Only on success
  rules:
    - if: $CI_COMMIT_TAG  # Build only on tags for efficiency

# Release Job: Create release and upload APK using glab
create_release:
  stage: release
  image: cimg/base:2024.04  # Lightweight base; install glab and tools
  needs: 
    - job: build
      artifacts: true  # Pulls APK from build job
  rules:
    - if: $CI_COMMIT_TAG  # Triggers only on tags (e.g., v1.7.0)
  before_script:
    # Install dependencies (glab, jq for changelog, sha256sum)
    - apt-get update -qq && apt-get install -yq glab jq curl
    # Authenticate glab with PAT if set (fallback to $CI_JOB_TOKEN auto-auth)
    - if [ -n "$GITLAB_PAT" ]; then echo "$GITLAB_PAT" | glab auth login --stdin --token-stdin; else glab auth status; fi
  script:
    # Generate SHA256 checksum for APK
    - sha256sum app/build/outputs/apk/release/app-release.apk > app/build/outputs/apk/release/app-release.sha256
    
    # Generate simple changelog (commits since previous tag)
    - PREV_TAG=$(git describe --tags --abbrev=0 "$(git rev-list --tags --max-count=2 | tail -n1)" 2>/dev/null || echo "HEAD")
    - CHANGELOG=$(git log --pretty=format:"- %s (%an, %ar)" "$PREV_TAG"..HEAD | head -10 || echo "Initial release")
    
    # Create release with description (multiline quoted with > for YAML safety)
    - |
      glab release create "$CI_COMMIT_TAG" \
        --title "Release $CI_COMMIT_TAG" \
        --description "Automated Android release for Codex app.

## Changelog
$CHANGELOG

## Download
- APK: app-release.apk (SHA256: $(sha256sum app/build/outputs/apk/release/app-release.apk | cut -d' ' -f1))
- Install: Enable 'Unknown sources' in Android settings.
- Full notes: See [compare](https://gitlab.com/BlindMint/codex/-/compare/$PREV_TAG...$CI_COMMIT_TAG)

Generated by GitLab CI." \
        --draft=false \
        --prerelease=false
    
    # Upload APK and SHA
    - glab release upload "$CI_COMMIT_TAG" "app/build/outputs/apk/release/app-release.apk" --name "app-release.apk"
    - glab release upload "$CI_COMMIT_TAG" "app/build/outputs/apk/release/app-release.sha256" --name "app-release.sha256"
    
    # Optional: Echo success (logs the release URL)
    - echo "Release created: https://gitlab.com/BlindMint/codex/-/releases/$CI_COMMIT_TAG"
  after_script:
    # Clean up or notify if needed
    - echo "Pipeline complete - check assets on release page."
  when: on_success